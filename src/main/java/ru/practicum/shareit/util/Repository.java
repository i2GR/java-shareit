package ru.practicum.shareit.util;

import javax.validation.Valid;
import java.util.List;
import java.util.Optional;

/**
 * Интерфейс-шаблон для хранилища идентифицируемых объектов модели, имеющих идентификатор <p>
 * ТЗ-13 <p>
 * Предусмаривается простая модель "CRUD" <p>
 * @implNote <u>"идентифицируемый объект"</u> - это экземпляр DTO-класса, реализующий интерфейс {@link Identifiable} <p>
 * @param <T> указанный экземпляр DTO-класса, имеющий идентификатора
 */

public interface Repository<T extends Identifiable> {

    /**
     * Сохранение экземпляра объекта модели
     * @param entity экземпляр для сохранения
     * @return сохраненный экземпляр
     */
    Optional<T> create(@Valid T entity);

    /**
     * Получение экземпляра объекта модели из хранилища по идентификатору
     * @param entityId присвоенный идентификатор экземпляра объекта модели
     * @return Optional с экземпляром DTO объекта модели или пользователя, полученный по идентификатору
     */
    Optional<T> readById(@Valid Long entityId);

    /**
     * Модификация  экземпляра объекта модели в хранилище
     * @param entity новый экземпляр объекта модели
     * @return экземпляра объекта модели
     */
    Optional<T> update(@Valid T entity);

    /**
     * Получение списка всех фильмов или пользователей
     * @return список
     */
    List<T> readAll();
    /**
     * ТЗ-10 <p>
     * Удаление экземпляра фильма или пользователя <p>
     * метод согласно пункту ТЗ "Архитектура"
     * @implNote Не используется в сервис-классаах и контроллер классах, т.к. не определены ендпойнты по ТЗ
     * @param id идентификатор экземпляра entity для удаления
     * @return экземпляр, удаленный и полученный из хранилища
     */
    Optional<T> delete(@Valid Long id);
}